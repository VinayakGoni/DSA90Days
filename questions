TCS

1. What are the Functional interfaces you have used?
2. How do you implement SSL in microservice?
3. What is CI/CD ? 
4. Which code coverage tools have you used?
5. Difference between map() and flatmap()?
6. What is the condition to implement a lambda expression?
7. What is a functional interface?
8. What is singleton class? How to create it?
9. How do you make a singleton object threadsafe?
10. How did you implement security in Springboot?
11. what are the advantages of Springboot?
12. What are the advantages of lambda expressions? and Functional interfaces?
13. Difference between Arralist and Linkedlist?
14. What is the default scope of a bean in Springboot?
15. What is the lifecycle of a maven project? (Validate, Compile, Test, Package, Integration test, Verify, Install and Deploy)

TR2:
1. collection vs collections?
2. How thread works? what happens if you run thread.run? and thread.start?
3. 


------------------------------------------------------------------------------------------

SpringML TR2 -- Gourab

Given an array of both positive and negative integers ‘arr1[]’ which are sorted. The task is to sort the square of the numbers of the Array into arr2[]. 
Make sure the solution works with linear time complexity

Examples: 

Input  : arr1[] = [-6, -5 , -3, 1 ,2 ,4]
Output : arr2[] = [1, 4, 9, 16, 25, 36]


------
Input  : arr1[] = [-6, -5 , -3, 1 ,2 ,4];
Output : arr2[] = [1, 4, 9, 16, 25, 36];
int len = arr1[].length;

int a = 0;
int b = len-1;


for(int i=1;i<=arr1.length;i++){

if(arr1[a] > arr1[b]){
arr2[b]=arr1[a]*arr1[a];
a++;
} else {
arr2[b-a] = arr1[b]*arr1[b];
b--;
}
}

1st itr
a=-6;b=4;i=1;n=6; arr2[5]=36;
a=

-------
Chat service : Web socket

https://app.diagrams.net/
------


// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        //System.out.println("Hello, World!"); 
        int [] arr1 = {-6, -5 , -3, 1 ,2 ,4};
        int [] arr2 = new int [arr1.length];
        int len = arr1.length;

    int a = 0;
    int b = len-1;


for(int i=0;i<arr1.length;i++){

if(Math.abs(arr1[a]) > Math.abs(arr1[b])){
    System.out.println("Abs values" + Math.abs(arr1[a]) + " and : " + Math.abs(arr1[b]));
arr2[b]=arr1[a]*arr1[a];
a++;
} else {
arr2[b-a] = arr1[b]*arr1[b];
b--;
}
}
    System.out.println(Arrays.toString(arr2)); 
    System.out.println(arr2); 
        
    }
}

------------------------------------------------------------------------------------------

============================================================
Publisis sapient

tool: https://codeinterview.io/

1. Difference between wait and sleep?
2. What is rehashing?
3. How hashmap works internally?
4. What is the internal data structure of hashmap?
5. What are the data strucures you have used? queue,topic,stach,heap etc
6. When to use arraylist and when to use linkedlist?
7. What is immutable class? create one using a field List<Student>
8. Can HashMap contain null key?
9. What is executor framework?
10. What are solid design patterns?
11. What are the considerations to create a new class and to modify an existing class?
12. 


implemented immutable object:
public final class ImmutableObj {
  
  private final List<Student> studentList;
  private final Date dob;
  
  public ImmutableObj(List<Student> list, Date dob){
    List<Student> deepCopy = new ArrayList<Student>();
    deepcopy = deepCopy.addAll(list);
    
    this.studentList=deepCopy;
    this.dob=dob;
  }
  
  public List<Student> getStudentList(){
    return studentList;
  }
  
  public Date getDob(){
    return dob;
  }
  
}

String manipulation:

public static void main (String[] args) {
    String s = "abc";
    s = "efg";
    System.out.println(s);
    
    final StringBuffer sb = new StringBuffer("abc");
    sb.append("efg");
    System.out.println(sb);
	}


============================================================

=====================================================================
Net crackers:

public boolean equals(Object obj){


if(obj==instanceOf(Object){


}



}


student.clone();


class Employee {
	String name;
	
	// Getter and setter
}


// how to clone an object
Employee e1 = new Employee();

Employee e2 = e1.clone();

// clone method signature
public Object clone (){

return this.object;

}


CloneNotSupported 

interface Clonable


// Abhay, Saket, vivek
// Abhay, Saket, Vinayak, vivek

ArrayList<String> sortedList = new 

LinkedList<String> list = new LinkedList<String>(sortedList);

// Binary search
// Exceptions

-- Lambda

ArrayList<String> sortedList = new ArrayList<String>();

ArrayList<String> original = new ArrayList<>();

ArrayList<String> dup = new ArrayList<>();

HashSet<> hs = new HashSet<String>();

original.Stream(str -> Collections.));

stream map and flat map in java



Employee {
	id
	name
	managerId
	Salary
	deprtId
}

Deparment {
	deprtId
	departName
}


//query to fetch dept name and # of employees under the department

select d.departName, count(e.id) from Deparment d, Employee e where d.deprtId=e.deprtId;

//query to fetch department name and employee having max salary from that departmenr

select d.departName, e.salary from Deparment d, Employee e order by e.salary desc;


=====================================================================

resisilence 4j circuit breaker (to mitigate the failures)
microservice to microservice communication
API gateway and Authentication 
2 phase commit
SAGA pattern (eliminates the disadvantages of 2 phase commot)
commit phase and lock phase
SOLID design pattern
event based SAGS pattern

https://microservices.io/patterns/data/saga.html    

https://microservices.io/

















